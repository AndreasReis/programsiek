using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CesarCipher
{
    public partial class CipherForm : Form
    {
        private ICipherDecipher myCipher;

        public CipherForm()
        {
            myCipher = new ICaesarCipher();

            InitializeComponent();
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            EncryptionBox.Text = string.Empty;
        }

        private void btnResetEncrypted_Click(object sender, EventArgs e)
        {
            EncryptedBox.Text = string.Empty;
        }

        private void btnEcryption_Click(object sender, EventArgs e)
        {
            string TextToEncryption = EncryptionBox.Text;

            string EncryptedText = myCipher.Encryption(TextToEncryption, 1);

            EncryptedBox.Text = EncryptedText;
        }

        private void btnDecryption_Click(object sender, EventArgs e)
        {
            string TextToDecryption = EncryptedBox.Text;

            string DecryptionText = myCipher.Dencryption(TextToDecryption, 1);

            DecryptionBox.Text = DecryptionText;
        }
    }
}

//INTERFACE

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CesarCipher
{
    interface ICipherDecipher
    {
        string Encryption(params object[] argumnets);
        string Dencryption(params object[] arguments);
    }
}

//CLASS CEASAR CIPHER

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CesarCipher
{
    class ICaesarCipher : ICipherDecipher
    {
       
        public string Encryption(params object[] arguments)
        {
            if (arguments.Length == 2)
            {
                string text = arguments[0] as string;
                int shift = (int)arguments[1];

                return Dencryption(text, shift);
            }

            return string.Empty;
        }

        public string Dencryption(params object[] arguments)
        {
            if (arguments.Length == 2)
            {
                string text = arguments[0] as string;
                int shift = (int)arguments[1];

                return Dencryption(text, shift);
            }

            return string.Empty;
        }

        private string Encryption(string text, int shift)
        {
            StringBuilder result = new StringBuilder();

            string alphabet = "ABCDEFGHIJKLMNOPQRSTUVXYWZ";   // "abcdefghijklmnopqrstuvxywz"; //abcdefghijklmnopqrstuvxywzABCDEFGHIJKLMNOPQRSTUVXYWZ
            int offset = alphabet.Length;

            foreach(char c in text)
            {
                char oldChar = c;
                int oldCharIdx = alphabet.IndexOf(c);

                int newCharIdx = (oldCharIdx + shift + offset) % offset;

                char newChar = alphabet[newCharIdx];

                result.Append(newChar);
            }
            return result.ToString();
        }

        private string Dencryption(string text, int shift)
        {

            return Encryption(text, shift * -1);
        }
    }
}
